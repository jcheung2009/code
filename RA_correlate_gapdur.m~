function [spk_gapdur_corr case_name dattable] = RA_correlate_gapdur(batchfile,seqlen,...
    minsampsize,activitythresh,motorwin,targetgapactivity,targetgapdur,plotcasecondition,shuff)
%correlate premotor spikes with gapdur 
%seqlen = length of syllable sequence (use 6)
%minsampsize = minimum number of trials 
%activitythresh = for peak detection (zscore relative to shuffled activity)
%motorwin = -40 (40 ms premotor window)
% targetgapactivity = 0;%-1:previous, 0:current, 1:next
% targetgapdur = 0;%-1:previous, 0:current, 1:next
%plotcasecondition = 'n' (don't plot), 'y+' (plot significant cases),'y++'
%(plot strongly significant cases),'y+su' (...single units)
%shuff = 'n' or 'y' (shuffled analysis, for cases with peak activity
%greater than thresh and multi unit), or 'ysu' (for activity greater than thresh and single units)
%spk_gapdur_corr = [corrcoef pval alignment firingrate width mn(pct_error)...
%numtrials, corrcoefdur1 pval corrcoefdur2 pval durmotorwin]
%alignby=1 or 2 (off1 or on2)


%parameters
config; 
win = gausswin(20);%for smoothing spike trains, 20 ms
win = win./sum(win);
if strcmp(plotcasecondition,'n')
    plotcasecondition = '1==0';
elseif strcmp(plotcasecondition,'y+')
    plotcasecondition = ['p(2)<=0.05 & pkactivity >=',num2str(activitythresh)];
elseif strcmp(plotcasecondition,'y++')
    plotcasecondition = ['p(2)<=0.05 & abs(r(2)) >= 0.3 & pkactivity >=',num2str(activitythresh)];
elseif strcmp(plotcasecondition,'y+su')
     plotcasecondition = ['p(2)<=0.05 & mean(pct_error)<=0.01 & pkactivity >=',num2str(activitythresh)];
end

spk_gapdur_corr = [];case_name = {};
dattable = table([],[],[],[],[],[],[],[],'VariableNames',{'dur','spikes',...
    'unittype','activity','birdid','unitid','seqid','corrpval'});
ff = load_batchf(batchfile);
for i = 1:length(ff)
    load(ff(i).name);
    spiketimes = spiketimes*1000;%ms
    
    %unique gap id
    gapids = find_uniquelbls(labels,seqlen,minsampsize);
    
    %for each unique sequence found  
    gapdurs_all = onsets(2:end)-offsets(1:end-1);
    for n = 1:length(gapids)
        
        %remove outliers 
        idx = strfind(labels,gapids(n));
        seqons = onsets(bsxfun(@plus, idx',(0:seqlen-1)));%realtime 
        seqoffs = offsets(bsxfun(@plus,idx',(0:seqlen-1)));
        gapdur_id = jc_removeoutliers(gapdurs_all(idx+seqlen/2-1),3);%remove trials with outliers in gap length
        gapdur_id = jc_removeoutliers(gapdur_id,3);
        id = find(isnan(gapdur_id));gapdur_id(id) = [];seqons(id,:) = [];seqoffs(id,:) = [];
        
        if ~isempty(find(seqoffs(:,end)-seqons(:,1)>=1000))
            id = find(seqoffs(:,end)-seqons(:,1)>=1000);%remove trials where sequence length > 1 sec
            seqons(id,:) = [];seqoffs(id,:) = [];gapdur_id(id) = [];
        end
        if length(gapdur_id)<25
            continue
        end

        %compute PSTH from spike trains aligned to onset of target element
        anchor = seqoffs(:,seqlen/2+targetgapactivity);
        seqst = ceil(max(anchor-seqons(:,1)));%start border for sequence activity relative to target gap (sylloff1)
        seqend = ceil(max(seqoffs(:,end)-anchor));%end border 
        [PSTH_mn tb smooth_spiketrains spktms] = smoothtrain(spiketimes,seqst,seqend,anchor,win);
%         seqst = ceil(max(seqoffs(:,seqlen/2+targetgapactivity)-seqons(:,1)));%boundaries for sequence activity relative to target gap (sylloff1)
%         seqend = ceil(max(seqoffs(:,end)-seqoffs(:,seqlen/2+targetgapactivity)));
%         spktms = cell(size(seqons,1),1);%spike times for each trial relative to target gap 
%         smooth_spiketrains = zeros(length(gapdur_id),seqst+seqend+1);
%         for m = 1:size(seqons,1)
%             temp = zeros(1,seqst+seqend+1);
%             x = spiketimes(find(spiketimes>=(seqoffs(m,seqlen/2+targetgapactivity)-seqst) & ...
%                 spiketimes<=(seqoffs(m,seqlen/2+targetgapactivity)+seqend)));
%             spktms{m} = x - seqoffs(m,seqlen/2+targetgapactivity); %spike times aligned by sylloff1 
%             spktimes = round(spktms{m})+seqst+1;
%             temp(spktimes) = 1;
%             smooth_spiketrains(m,:) = conv(temp,win,'same');
%         end
%         tb = [-seqst:seqend];
%         PSTH_mn = mean(smooth_spiketrains,1).*1000;

        %find peaks/bursts in PSTH in premotor window
        [pks, locs,w,~,wc] = findpeaks2(PSTH_mn,'MinPeakProminence',10,...
            'MinPeakWidth',10,'Annotate','extents','WidthReference','halfheight');
        pkid = find(tb(locs)>=motorwin & tb(locs)<=0);
        wc = round(wc);
        if isempty(pkid)
            continue
        end
        
        %shuffled spike train to detect peaks that are significantly
        %above shuffled activity
        smooth_spiketrains_rand = permute_rowel(smooth_spiketrains);
        PSTH_mn_rand = mean(smooth_spiketrains_rand,1).*1000;
        
        %order trials by gapdur
        [~,ix] = sort(gapdur_id,'descend');
        gapdur_id = gapdur_id(ix);spktms = spktms(ix);seqons = seqons(ix,:);seqoffs = seqoffs(ix,:);smooth_spiketrains=smooth_spiketrains(ix,:);
        if targetgapdur ~= 0
            gapseq = seqons(:,2:end)-seqoffs(:,1:end-1);
            gapdur_id_corr = gapseq(:,seqlen/2+targetgapdur);%gapdur for correlation with activity
        else
            gapdur_id_corr = gapdur_id;    
        end
        
        %for each burst found, test alignment and correlate with gapdur
        for ixx = 1:length(pkid)
            %define peak borders
            [burstst burstend] = peakborder(wc,pkid(ixx),locs,tb);
%             burstend = wc(pkid(ixx),2)+(wc(pkid(ixx),2)-locs(pkid(ixx)));
%             burstst = wc(pkid(ixx),1)-(locs(pkid(ixx))-(wc(pkid(ixx),1)));
%             if pkid(ixx)<size(wc,1)
%                 if burstend > wc(pkid(ixx)+1,1)
%                     burstend = ceil((wc(pkid(ixx),2)+wc(pkid(ixx)+1,1))/2);
%                 end
%             end
%             if pkid(ixx) ~= 1
%                 if burstst < wc(pkid(ixx)-1,2)
%                     burstst = floor((wc(pkid(ixx),1)+wc(pkid(ixx)-1,2))/2);
%                 end
%             end
            
            %average pairwise correlation of spike trains 
            r = xcorr(smooth_spiketrains(:,burstst:burstend)',0,'coeff');
            r = reshape(r,[size(smooth_spiketrains,1) size(smooth_spiketrains,1)]);
            r = r(find(triu(r,1)));
            varburst1 = nanmean(r);
            
            %compute PSTH when aligned to secondary target element
            anchor = seqons(:,seqlen/2+targetgapactivity+1);
            seqst2 = ceil(max(anchor-seqons(:,1)));%boundaries for sequence activity relative to target gap (sylloff1)
            seqend2 = ceil(max(seqoffs(:,end)-anchor));
            [PSTH_mn_on2 tb2 smooth_spiketrains_on2 spktms_on2] = smoothtrain(spiketimes,seqst2,seqend2,anchor,win);
%             seqons_alignedoff1 = seqons-seqoffs(:,seqlen/2+targetgapactivity);
%             anchor=seqons_alignedoff1(:,seqlen/2+targetgapactivity+1);
%             spktms_on2 = arrayfun(@(x) spktms{x}-anchor(x),1:length(spktms),'un',0);%realign spike times in each trial by on2
%             seqst2 = ceil(abs(min([spktms_on2{:}])));
%             seqend2 = ceil(abs(max([spktms_on2{:}])));
%             smooth_spiketrains_on2 = zeros(length(gapdur_id),seqst2+seqend2+1);
%             for m = 1:length(gapdur_id)
%                 temp = zeros(1,seqst2+seqend2+1);
%                 spktimes = round(spktms_on2{m})+seqst2+1;
%                 temp(spktimes) = 1;
%                 smooth_spiketrains_on2(m,:) = conv(temp,win,'same');
%             end  
%             tb2 = [-seqst2:seqend2];
%             PSTH_mn_on2 = mean(smooth_spiketrains_on2,1).*1000;
            
            %find peak aligned to secondary anchor that corresponds to
            %target burst
            [pks2, locs2,w2,~,wc2] = findpeaks2(PSTH_mn_on2,'MinPeakProminence',...
                10,'MinPeakWidth',10,'Annotate','extents','WidthReference','halfheight');
            if ~isempty(locs2)
                wc2 = round(wc2);
                ix = find(tb2(locs2)>=motorwin-mean(gapdur_id) & tb2(locs2)<=-mean(gapdur_id));
                if isempty(ix)
                     alignby=1;%off1
                     wth = w(pkid(ixx));
                     pkactivity = (pks(pkid(ixx))-mean(PSTH_mn_rand))/std(PSTH_mn_rand);
                     npks_burst = cellfun(@(x) length(find(x>=tb(burstst)&x<tb(burstend))),spktms);%extract nspks in each trial
                else
                    [xy,ix] = min(abs(tb2(locs2)-(tb(locs(pkid(ixx)))-mean(anchor))));
                    [burstst2 burstend2] = peakborder(wc2,ix,locs2,tb2);
%                     burstend2 = wc2(ix,2)+(wc2(ix,2)-locs2(ix));%find burst border
%                     burstst2 = wc2(ix,1)-(locs2(ix)-wc2(ix,1));
%                     if ix < size(wc2,1) 
%                         if burstend2 > wc2(ix+1,1)
%                             burstend2 = ceil((wc2(ix,2)+wc2(ix+1,1))/2);
%                         end
%                     end
%                     if ix ~= 1
%                         if burstst2 < wc2(ix-1,2)
%                             burstst2 = floor((wc2(ix,1)+wc2(ix-1,2))/2);
%                         end
%                     end

                    %use average pairwise correlation comparison to choose
                    %alignment
                    r = xcorr(smooth_spiketrains_on2(:,burstst2:burstend2)',0,'coeff');
                    r = reshape(r,[size(smooth_spiketrains_on2,1) size(smooth_spiketrains_on2,1)]);
                    r = r(find(triu(r,1)));
                    varburst2 = nanmean(r);

                    if varburst1 < varburst2
                        alignby=2;%on2
                        wth = w2(ix);anchor = seqons(:,seqlen/2+targetgapactivity+1);
                        pkactivity = (pks2(ix)-mean(PSTH_mn_rand))/std(PSTH_mn_rand);
                        npks_burst = cellfun(@(x) length(find(x>=tb2(burstst2)&x<tb2(burstend2))),spktms_on2);%extract nspks in each trial
                    else
                        alignby=1;%off1
                        wth = w(pkid(ixx));anchor = seqoffs(:,seqlen/2+targetgapactivity);
                        pkactivity = (pks(pkid(ixx))-mean(PSTH_mn_rand))/std(PSTH_mn_rand);
                        npks_burst = cellfun(@(x) length(find(x>=tb(burstst)&x<tb(burstend))),spktms);%extract nspks in each trial
                    end
                end
            else
                 alignby=1;%off1
                 wth = w(pkid(ixx));
                 pkactivity = (pks(pkid(ixx))-mean(PSTH_mn_rand))/std(PSTH_mn_rand);
                 npks_burst = cellfun(@(x) length(find(x>=tb(burstst)&x<tb(burstend))),spktms);%extract nspks in each trial
            end

            %shuffle analysis
            if ~isempty(strfind(shuff,'y'))
                shufftrials = 1000;
                if isempty(strfind(shuff,'su')) %for multi unit shuff
                    if pkactivity >= activitythresh & mean(pct_error)>0.01
                          [r p] = shuffle(npks_burst,gapdur_id_corr,shufftrials);
                          spk_gapdur_corr = [spk_gapdur_corr r p];
                    else
                        continue
                    end
                else %for single unit shuff
                    if mean(pct_error)<=0.01 & pkactivity >= activitythresh
                        [r p] = shuffle(npks_burst,gapdur_id_corr,shufftrials);
                        spk_gapdur_corr = [spk_gapdur_corr r p];
                    else
                        continue
                    end
                end
            else
                [r p] = corrcoef(npks_burst,gapdur_id_corr);
                dur1_id = seqoffs(:,seqlen/2+targetgapdur)-seqons(:,seqlen/2+targetgapdur);
                dur2_id = seqoffs(:,seqlen/2+targetgapdur+1)-seqons(:,seqlen/2+targetgapdur+1);
                [r1 p1] = corrcoef(npks_burst,dur1_id);
                [r2 p2] = corrcoef(npks_burst,dur2_id);
                
                %measure latency between burst and next syllable onset 
                if alignby==1
                    durmotorwin = tb(locs(pkid(ixx)))-mean(seqons(:,seqlen/2+1)-seqoffs(:,seqlen/2));
                elseif alignby == 2
                    durmotorwin = tb2(locs2(ix));
                end
                
                spk_gapdur_corr = [spk_gapdur_corr; r(2) p(2) alignby pkactivity...
                    wth mean(pct_error) length(gapdur_id) r1(2) p1(2) r2(2) p2(2) durmotorwin];
            
                %variables for multilevel regression table
                [~,stid] = regexp(ff(i).name,'data_');
                enid = regexp(ff(i).name,'_TH');
                unitid = ff(i).name(stid+1:enid-1);
                case_name = [case_name,{unitid,gapids{n}}];
                birdid = repmat({unitid(1:regexp(unitid,'_')-1)},length(gapdur_id_corr),1);
                unitid = repmat({unitid},length(gapdur_id_corr),1);
                seqid = repmat(gapids(n),length(gapdur_id_corr),1);
                gapdur_id_corrn = (gapdur_id_corr-nanmean(gapdur_id_corr))/nanstd(gapdur_id_corr);
                npks_burstn = (npks_burst-mean(npks_burst))/std(npks_burst);
                unittype = repmat(mean(pct_error),length(gapdur_id_corr),1);
                activitylevel = repmat(pkactivity,length(gapdur_id_corr),1);
                corrpval = repmat(p(2),length(gapdur_id_corr),1);
                T = table(gapdur_id_corrn,npks_burstn,unittype,activitylevel,birdid,unitid,seqid,corrpval,'VariableNames',...
                    {'dur','spikes','unittype','activity','birdid','unitid','seqid','corrpval'});
                dattable=[dattable;T];
            end

            if eval(plotcasecondition)
                figure;subplot(3,1,1);hold on
                if alignby==1
                    plotraster(gapdur_id,spktms,tb,burstst,burstend,seqons,seqoffs,...
                        seqst,seqend,anchor,ff(i).name,pct_error,gapids{n},r(2));
                elseif alignby==2
                    plotraster(gapdur_id,spktms_on2,tb2,burstst2,burstend2,seqons,seqoffs,...
                        seqst2,seqend2,anchor,ff(i).name,pct_error,gapids{n},r(2));
                end
                
                thr1 = quantile(gapdur_id,0.25);%threshold for small gaps
                smallgaps_id = find(gapdur_id <= thr1);
                thr2 = quantile(gapdur_id,0.75);%threshold for large gaps
                largegaps_id = find(gapdur_id >= thr2);
                if alignby==2
                    spktms_on2_inburst = cellfun(@(x) x(find(x>=tb2(burstst2)&x<tb2(burstend2))),spktms_on2,'un',0);
                elseif alignby==1
                    spktms_inburst = cellfun(@(x) x(find(x>=tb(burstst)&x<tb(burstend))),spktms,'un',0);
                end
                figure;subplot(3,1,1);hold on;cnt=0;
                for m = 1:length(gapdur_id)
                    if alignby==1
                        if ~isempty(spktms{m})
                            plot(repmat(spktms{m},2,1),[cnt cnt+1],'k');hold on;
                        end
                        if ~isempty(spktms_inburst{m})
                            plot(repmat(spktms_inburst{m},2,1),[cnt cnt+1],'g');hold on;
                        end
                        for syll=1:seqlen
                            patch([seqons(m,syll) seqoffs(m,syll) seqoffs(m,syll) seqons(m,syll)]-seqoffs(m,seqlen/2+targetgapactivity),...
                                 [cnt cnt cnt+1 cnt+1],[0.7 0.3 0.3],'edgecolor','none','facealpha',0.3);hold on;
                        end
                    elseif alignby==2
                        if ~isempty(spktms_on2{m})
                            plot(repmat(spktms_on2{m},2,1),[cnt cnt+1],'k');hold on;
                        end
                        if ~isempty(spktms_on2_inburst{m})
                            plot(repmat(spktms_on2_inburst{m},2,1),[cnt cnt+1],'g');hold on;
                        end
                        for syll=1:seqlen
                            patch([seqons(m,syll) seqoffs(m,syll) seqoffs(m,syll) seqons(m,syll)]-seqons(m,seqlen/2+targetgapactivity+1),...
                                 [cnt cnt cnt+1 cnt+1],[0.7 0.3 0.3],'edgecolor','none','facealpha',0.3);hold on;
                        end
                    end
                    cnt=cnt+1;
                end
                [~,stid] = regexp(ff(i).name,'data_');
                enid = regexp(ff(i).name,'_TH');
                unitid = ff(i).name(stid+1:enid-1);
                singleunit = mean(pct_error)<=0.01;
                title([unitid,' ',gapids{n},' r=',num2str(r(2)),' unit=',num2str(singleunit)],'interpreter','none');
                xlabel('time (ms)');ylabel('trial');set(gca,'fontweight','bold');
                if alignby==1
                    xlim([-seqst seqend]);ylim([0 cnt]);
                    plot(-seqst,min(smallgaps_id),'r>','markersize',4,'linewidth',2);hold on;
                    plot(-seqst,max(largegaps_id),'b>','markersize',4,'linewidth',2);hold on;
                elseif alignby==2
                    xlim([-seqst2 seqend2]);ylim([0 cnt]);
                    plot(-seqst2,min(smallgaps_id),'r>','markersize',4,'linewidth',2);hold on;
                    plot(-seqst2,max(largegaps_id),'b>','markersize',4,'linewidth',2);hold on;
                end   
                
                subplot(3,1,2);hold on;
                if alignby==1
                    plotPSTH(seqst,seqend,smooth_spiketrains,gapdur_id,tb,burstst,burstend);
                elseif alignby==2
                    plotPSTH(seqst2,seqend2,smooth_spiketrains_on2,gapdur_id,tb2,burstst2,burstend2);
                end
                
                subplot(3,1,2);hold on;
                if alignby==1
                    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains(smallgaps_id,:),1)-...
                        stderr(smooth_spiketrains(smallgaps_id,:),1)...
                        fliplr(mean(smooth_spiketrains(smallgaps_id,:),1)+...
                        stderr(smooth_spiketrains(smallgaps_id,:),1))])*1000,[0.7 0.3 0.3],'edgecolor','none','facealpha',0.7);
                    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains(largegaps_id,:),1)-...
                        stderr(smooth_spiketrains(largegaps_id,:),1)...
                        fliplr(mean(smooth_spiketrains(largegaps_id,:),1)+...
                        stderr(smooth_spiketrains(largegaps_id,:),1))])*1000,[0.3 0.3 0.7],'edgecolor','none','facealpha',0.7);
                    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains,1)-...
                        stderr(smooth_spiketrains,1)...
                        fliplr(mean(smooth_spiketrains,1)+...
                        stderr(smooth_spiketrains,1))])*1000,[0.8 0.8 0.8],'edgecolor','none','facealpha',0.7);
                    yl = get(gca,'ylim');
                    plot(repmat([tb(burstst) tb(burstend)],2,1),yl,'g','linewidth',2);hold on;
                    xlim([-seqst seqend]);
                elseif alignby==2
                    patch([-seqst2:seqend2 fliplr(-seqst2:seqend2)],([mean(smooth_spiketrains_on2(smallgaps_id,:),1)-...
                        stderr(smooth_spiketrains_on2(smallgaps_id,:),1)...
                        fliplr(mean(smooth_spiketrains_on2(smallgaps_id,:),1)+...
                        stderr(smooth_spiketrains_on2(smallgaps_id,:),1))])*1000,[0.7 0.3 0.3],'edgecolor','none','facealpha',0.7);
                    patch([-seqst2:seqend2 fliplr(-seqst2:seqend2)],([mean(smooth_spiketrains_on2(largegaps_id,:),1)-...
                        stderr(smooth_spiketrains_on2(largegaps_id,:),1)...
                        fliplr(mean(smooth_spiketrains_on2(largegaps_id,:),1)+...
                        stderr(smooth_spiketrains_on2(largegaps_id,:),1))])*1000,[0.3 0.3 0.7],'edgecolor','none','facealpha',0.7);
                    patch([-seqst2:seqend2 fliplr(-seqst2:seqend2)],([mean(smooth_spiketrains_on2,1)-...
                        stderr(smooth_spiketrains_on2,1)...
                        fliplr(mean(smooth_spiketrains_on2,1)+...
                        stderr(smooth_spiketrains_on2,1))])*1000,[0.8 0.8 0.8],'edgecolor','none','facealpha',0.7);
                    yl = get(gca,'ylim');
                    plot(repmat([tb2(burstst2) tb2(burstend2)],2,1),yl,'g','linewidth',2);hold on;
                    xlim([-seqst2 seqend2]);
                end
                xlabel('time (ms)');ylabel('Hz');set(gca,'fontweight','bold');
                
                subplot(3,1,3);hold on;
                plotCORR(npks_burst,gapdur_id_corr);
                
                subplot(3,1,3);hold on;
                scatter(npks_burst,gapdur_id_corr,'k.');hold on;
                xlim([min(npks_burst)-1 max(npks_burst)+1]);lsline
                xlabel('number of spikes');ylabel('gap duration (ms)');
                set(gca,'fontweight','bold');

            end
        end
    end
end

function [PSTH_mn tb smooth_spiketrains spktms] = smoothtrain(spiketimes,seqst,seqend,anchor,win);
    spktms = cell(size(anchor,1),1);%spike times for each trial relative to target gap 
    smooth_spiketrains = zeros(size(anchor,1),seqst+seqend+1);
    for m = 1:size(anchor,1)
        temp = zeros(1,seqst+seqend+1);
        x = spiketimes(find(spiketimes>=(anchor(m)-seqst) & spiketimes<=(anchor(m)+seqend)));
        spktms{m} = x - anchor(m); 
        spktimes = round(spktms{m})+seqst+1;
        temp(spktimes) = 1;
        smooth_spiketrains(m,:) = conv(temp,win,'same');
    end
    tb = [-seqst:seqend];
    PSTH_mn = mean(smooth_spiketrains,1).*1000;%spikes/second

function [burstst burstend] = peakborder(wc,id,locs,tb);
    burstend = wc(id,2)+(wc(id,2)-locs(id));
    burstst = wc(id,1)-(locs(id)-(wc(id,1)));
    if id<size(wc,1)
        if burstend > wc(id+1,1)
            burstend = ceil((wc(id,2)+wc(id+1,1))/2);
        end
    end
    if id ~= 1
        if burstst < wc(id-1,2)
            burstst = floor((wc(id,1)+wc(id-1,2))/2);
        end
    end
    if burstst <= 0
        burstst = 1;
    end
    if burstend > length(tb)
        burstend = length(tb);
    end

function [r p] = shuffle(npks_burst,gapdur_id_corr,shufftrials);
    npks_burst_shuff = repmat(npks_burst,shufftrials,1);
    npks_burst_shuff = permute_rowel(npks_burst_shuff);
    [r p] = corrcoef([npks_burst_shuff',gapdur_id_corr]);
    r = r(1:end-1,end);
    p = p(1:end-1,end);  
    
function plotraster(gapdur_id,spktms,tb,burstst,burstend,seqons,seqoffs,...
    seqst,seqend,anchor,name,pct_error,seqid,corrval)
    thr1 = quantile(gapdur_id,0.25);%threshold for small gaps
    smallgaps_id = find(gapdur_id <= thr1);
    thr2 = quantile(gapdur_id,0.75);%threshold for large gaps
    largegaps_id = find(gapdur_id >= thr2);
    spktms_inburst = cellfun(@(x) x(find(x>=tb(burstst)&x<tb(burstend))),spktms,'un',0);
    cnt=0;
    for m = 1:length(gapdur_id)
        if ~isempty(spktms{m})
            plot(repmat(spktms{m},2,1),[cnt cnt+1],'k');hold on;
        end
        if ~isempty(spktms_inburst{m})
            plot(repmat(spktms_inburst{m},2,1),[cnt cnt+1],'g');hold on;
        end
        for syll=1:size(seqons,2)
            patch([seqons(m,syll) seqoffs(m,syll) seqoffs(m,syll) seqons(m,syll)]-anchor(m),...
                 [cnt cnt cnt+1 cnt+1],[0.7 0.3 0.3],'edgecolor','none','facealpha',0.3);hold on;
        end
        cnt=cnt+1;
    end
    [~,stid] = regexp(name,'data_');
    enid = regexp(name,'_TH');
    unitid = name(stid+1:enid-1);
    singleunit = mean(pct_error)<=0.01;
    title([unitid,' ',seqid,' r=',num2str(corrval),' unit=',num2str(singleunit)],'interpreter','none');
    xlabel('time (ms)');ylabel('trial');set(gca,'fontweight','bold');
    xlim([-seqst seqend]);ylim([0 cnt]);
    plot(-seqst,min(smallgaps_id),'r>','markersize',4,'linewidth',2);hold on;
    plot(-seqst,max(largegaps_id),'b>','markersize',4,'linewidth',2);hold on;
        
function plotPSTH(seqst,seqend,smooth_spiketrains,gapdur_id,tb,burstst,burstend);
    thr1 = quantile(gapdur_id,0.25);%threshold for small gaps
    smallgaps_id = find(gapdur_id <= thr1);
    thr2 = quantile(gapdur_id,0.75);%threshold for large gaps
    largegaps_id = find(gapdur_id >= thr2);
    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains(smallgaps_id,:),1)-...
        stderr(smooth_spiketrains(smallgaps_id,:),1)...
        fliplr(mean(smooth_spiketrains(smallgaps_id,:),1)+...
        stderr(smooth_spiketrains(smallgaps_id,:),1))])*1000,[0.7 0.3 0.3],'edgecolor','none','facealpha',0.7);
    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains(largegaps_id,:),1)-...
        stderr(smooth_spiketrains(largegaps_id,:),1)...
        fliplr(mean(smooth_spiketrains(largegaps_id,:),1)+...
        stderr(smooth_spiketrains(largegaps_id,:),1))])*1000,[0.3 0.3 0.7],'edgecolor','none','facealpha',0.7);
    patch([-seqst:seqend fliplr(-seqst:seqend)],([mean(smooth_spiketrains,1)-...
        stderr(smooth_spiketrains,1)...
        fliplr(mean(smooth_spiketrains,1)+...
        stderr(smooth_spiketrains,1))])*1000,[0.8 0.8 0.8],'edgecolor','none','facealpha',0.7);
    yl = get(gca,'ylim');
    plot(repmat([tb(burstst) tb(burstend)],2,1),yl,'g','linewidth',2);hold on;
    xlim([-seqst seqend]);
    xlabel('time (ms)');ylabel('Hz');set(gca,'fontweight','bold');

function plotCORR(npks_burst,gapdur_id_corr);
    scatter(npks_burst,gapdur_id_corr,'k.');hold on;
    xlim([min(npks_burst)-1 max(npks_burst)+1]);lsline
    xlabel('number of spikes');ylabel('gap duration (ms)');
    set(gca,'fontweight','bold');

    
        
