function [spk,outfile]=BSsort2mat(dpath,stimulus,probestyle,fs,toSave,multiunit)
%this function corrects for differences between the trig.ncs and .ncs file
%and saves the trigs with in the outfile

if(~exist('toSave','var'))
    toSave = 0;
end
if(~exist('multiunit','var'))
    multiunit = 0;
end

method = 'KlustaKwik';
tag = '4';
include_multiunits = 0;
s = struct(...
    'exp',         [], ...
    'site',        [], ...
    'probe',       [], ...
    'chan',        [], ...
    'model',       [], ...
    'depth',       [], ...
    'position',    [], ...
    'stim',        [], ...
    'input_chan',  [], ...
    'return_chan', [], ...
    'current',     [], ...
    'atten',       [], ...
    'header',      [], ...
    'waveform',    [], ...
    'spiketimes',  [], ...
    'outliers',    [], ...
    'fs',          []);

%Getting experiment parameters from folder name
%format:
%   [year]-[month]-[day]-site[#]-p1_[depth]um-p2_[depth]um-[attn]db-[text]
slashind = findstr(dpath,'\');
if(isempty(slashind))
    pen_info = dpath;
else
    pen_info = dpath((slashind(end)+1):end); %remove parent dir name
end
[year,month,day,site,depth(1),depth(2),atten,stim,temp] = strread(pen_info,'%s%s%ssite%dp1_%dum-p2_%dum%ddb%s%s','delimiter','-');
input_chan = [];
return_chan = [];
current = [];
%Converting from cell arrays to strings
expdate = [char(year) '-' char(month) '-' char(day)];
stim = char(stim);
current = char(current);


%get lists of files in folder
triggersfile = dir([dpath '\*.ncsthreshed']);
trigStruct = load(triggersfile.name,'-mat'); %used in correcting stim times
% ncsClassedFiles = dir([dpath '\*.ncs' tag method 'MulitUnitclassified']); %currently only used because i have an extra tag of multi that shouldn't be there
ncsClassedFiles = dir([dpath '\*.ncs' tag method 'classified']);

fprintf(1,'We found %d files\n',length(ncsClassedFiles));
sortedCount = 1; %to count number of sorted sites
for i = 1:length(ncsClassedFiles)
    if(~isempty(strfind(ncsClassedFiles(i).name,'Chan')))
        [probe,esite,stringText] = strread(ncsClassedFiles(i).name,'BSSP%dChan%d.ncs%s');
    elseif(~isempty(strfind(ncsClassedFiles(i).name(1:15),'t')))
        [probe, esite, tetnum, esiteorder, stringtext] = strread(ncsClassedFiles(i).name,'BSSp%ds%dt%dc%d.%s');
    else
        [probe, esite, esiteorder, stringtext] = strread(ncsClassedFiles(i).name,'BSSp%ds%dd%d.%s'); %only works for linear probes right now, don't use tetrode description anyways
    end
    classedStruct = load(ncsClassedFiles(i).name,'-mat');
    %open the unclassified verison for waveform information
    
    %
    disp('we have an extra offset to the filename'); %%%%%%%% DEBUG %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    dotindex = strfind(ncsClassedFiles(i).name,'classified');%-9; % -9 is extra offset to correct for an error
    unclassedStruct = load(ncsClassedFiles(i).name(1:dotindex-1),'-mat');
    
    if(multiunit)
        include_multiunits = 1;
        classedStruct.uids = 1;
        classedStruct.ids = ones(size(classedStruct.ids));
        classedStruct.goodness = 2*ones(size(classedStruct.goodness));
    end
    for j = 1:length(classedStruct.uids)
        if(classedStruct.goodness(j) == 1  || include_multiunits && classedStruct.goodness(j)==2) %only use single units
%             disp((trigStruct.firstTimeStamp-unclassedStruct.firstTimeStamp));
            indicies = (classedStruct.ids == classedStruct.uids(j));
            waveforms = unclassedStruct.snippets(indicies,:);
            spiketimes = unclassedStruct.samplenums(indicies)/fs-(trigStruct.firstTimeStamp-unclassedStruct.firstTimeStamp)/1000000; %correct to trigger timing and correction in analyzeTriggeredRecording
            
            s(sortedCount).exp = expdate;
            s(sortedCount).site = site;
            s(sortedCount).depth = depth(probe); %save depth from filename
            s(sortedCount).position = getPositionForProbe(probestyle,esite); %save position from calculation
            s(sortedCount).probe = probe;
            s(sortedCount).chan = esite; % assign channel number
            s(sortedCount).stim = stimulus; %save the stimulus name
            s(sortedCount).model = classedStruct.uids(j); %save index in classified file
            s(sortedCount).header = ncsClassedFiles(i).name; %save classified file name
            s(sortedCount).input_chan = input_chan;
            s(sortedCount).return_chan = return_chan;
            s(sortedCount).current = current;
            s(sortedCount).atten = atten;
            s(sortedCount).waveform = mean(waveforms,1); % save model action potential waveform
            s(sortedCount).fs = fs; % save sampling frequency
            s(sortedCount).spiketimes = spiketimes;
            s(sortedCount).outliers = []; %not determining outliers yet
            
            sortedCount = sortedCount + 1;
        end
    end
end
spk = s;
if(~multiunit)
    outfile = sprintf('%s-site%d-p1_%dum-p2_%dum-%ddB-%s-fs%d-spk.mat',expdate,site,depth(1),depth(2),atten,stim,fs); 
else
    outfile = sprintf('%s-site%d-p1_%dum-p2_%dum-%ddB-%s-fs%dMULTIUNIT-spk.mat',expdate,site,depth(1),depth(2),atten,stim,fs);    
end

if(toSave) %save in the same format as analyzeTriggeredRecording
    trigSample = trigStruct.samplenums;
    trigTimes = trigSample/30303;
    [trigTimes, tripIndex] = findTripleTrig(trigTimes,0.05);
    if (isempty(tripIndex))
        if(strcmp(stimulus,'OldFullToneNoiseStimuli')) %first stimulus didn't have triple triggers so hard code them
            tripIndex = [1 481 961  1441 1921];
            disp('Using hardcoded triple triggers');
            fprintf(1,'%d triggers were found\n',length(trigTimes));
        else
            tripIndex = 1;
            disp('There were no triple triggers in this file');
        end
    end    
    trigs = cell(length(tripIndex),2);
    for i = 1:(length(tripIndex)-1)
        trigs{i,1} = trigTimes(tripIndex(i):tripIndex(i+1)-1);  %added the -1s at the end
        trigs{i,2} = trigSample(tripIndex(i):tripIndex(i+1)-1);
    end
    trigs{end,1} = trigTimes(tripIndex(end):end);
    trigs{end,2} = trigSample(tripIndex(end):end);
    if(length(trigs{end,1}) < length(trigs{1,1}))
        trigs = trigs(1:end,:);
    end
    
    offsets = zeros(16,1); %we already correct for offsets
    save(outfile,'spk','trigs','offsets')
end


function position = getPositionForProbe(map,index)
%returns the height above the tip of the probe for the given probe and site
%number

switch(map)
    case '1x16x150'
        probemap = [...
            9       2250; ...
            8       2100; ...
            10      1950; ...
            7       1800; ...
            13      1650; ...
            4       1500; ...
            12      1350; ...
            5       1200; ...
            15      1050; ...
            2        900; ...
            16       750; ...
            1        600; ...
            14       450; ...
            3        300; ...
            11       150; ...
            6          0;];
        probemap(:,2) = probemap(:,2)+50;%for offset
    case '1x16x100'
        probemap = [...
            9       1500; ...
            8       1400; ...
            10      1300; ...
            7       1200; ...
            13      1100; ...
            4       1000; ...
            12       900; ...
            5        800; ...
            15       700; ...
            2        600; ...
            16       500; ...
            1        400; ...
            14       300; ...
            3        200; ...
            11       100; ...
            6          0;];
        probemap(:,2) = probemap(:,2)+50;%for offset
    case '1x16x50'
        probemap = [...
            9        750; ...
            8        700; ...
            10       650; ...
            7        600; ...
            13       550; ...
            4        500; ...
            12       450; ...
            5        400; ...
            15       350; ...
            2        300; ...
            16       250; ...
            1        200; ...
            14       150; ...
            3        100; ...
            11        50; ...
            6          0;];
        probemap(:,2) = probemap(:,2)+50;%for offset
    case '2x2x4'
        c =  18; %technically 17.6;
        probemap = [...
            2,      150+c; ...
            3,        150; ...
            7,        150; ...
            5,      150-c; ...
            1,          c; ...
            6,          0; ...
            8,          0; ...
            4,         -c; ...
            12,     150+c; ...
            10,       150; ...
            14,       150; ...
            15,     150-c; ...
            13,         c; ...
            9,          0; ...
            11,         0; ...
            16,        -c;];
        probemap(:,2) = probemap(:,2)+80;%for offset
end
position = probemap(probemap(:,1)==index,2);